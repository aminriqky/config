# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, lib, pkgs, ... }:

let
  nvidia-offload = pkgs.writeShellScriptBin "nvidia-offload" ''
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __VK_LAYER_NV_optimus=NVIDIA_only
    exec "$@"
  '';
  hardware.fancontrol.config = 
  ''
    # Configuration file generated by pwmconfig
    INTERVAL=10
    DEVPATH=hwmon3=devices/virtual/thermal/thermal_zone2 hwmon4=devices/platform/f71882fg.656
    DEVNAME=hwmon3=soc_dts1 hwmon4=f71869a
    FCTEMPS=hwmon4/device/pwm1=hwmon3/temp1_input
    FCFANS=hwmon4/device/pwm1=hwmon4/device/fan1_input
    MINTEMP=hwmon4/device/pwm1=35
    MAXTEMP=hwmon4/device/pwm1=65
    MINSTART=hwmon4/device/pwm1=150
    MINSTOP=hwmon4/device/pwm1=0
  '';
  #nbfc = pkgs.stdenv.mkDerivation {
  #  name = "nbfc-linux";
  #  version = "0.1.6";

  #  src  = pkgs.fetchFromGitHub {
  #    owner  = "nbfc-linux";
  #    repo   = "nbfc-linux";
  #    rev    = "4c2b75e4a875459e86a9892319889ff945e9cadf";
  #    sha256 = "UxaL4V8FkA+eONCj7vTHAlRSJxoXqRB2aW7A/KJyvlY=";
  #  };

  #  buildFlags = [ "PREFIX=$(out)" "confdir=/etc" ];

  #  installPhase =
  #    let
  #      installFlags = [ "PREFIX=$out" ];
  #    in
  #    ''
  #      make ${builtins.concatStringsSep " " installFlags}\
  #           install-core \
  #           install-client-c\
  #           install-configs\
  #           install-docs\
  #           install-completion
  #    '';
  #};
in
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.efi.efiSysMountPoint = "/boot/efi";

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Asia/Jakarta";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.utf8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "id_ID.utf8";
    LC_IDENTIFICATION = "id_ID.utf8";
    LC_MEASUREMENT = "id_ID.utf8";
    LC_MONETARY = "id_ID.utf8";
    LC_NAME = "id_ID.utf8";
    LC_NUMERIC = "id_ID.utf8";
    LC_PAPER = "id_ID.utf8";
    LC_TELEPHONE = "id_ID.utf8";
    LC_TIME = "id_ID.utf8";
  };

  nix.settings.auto-optimise-store = true;

  #systemd.services.nbfc_service = {
  #  enable = true;
  #  description = "NoteBook FanControl service";
  #  unitConfig = {
  #    Type = "simple";
  #  };
  #  serviceConfig = {
  #    ExecStartPre = "${nbfc}/bin/nbfc_service -c '${nbfc}/share/nbfc/configs/Acer Nitro AN515-51.json'";
  #    ExecStart = "${nbfc}/bin/nbfc start";
  #  };
  #  wantedBy = [ "multi-user.target" ];
  #};

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the KDE Plasma Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = "us";
    xkbVariant = "";
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.aminriqky = {
    isNormalUser = true;
    description = "Amin Riqky";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
      ungoogled-chromium
      firefox
      vscode
      libreoffice-fresh
      libsForQt5.ark
      latte-dock
      unrar
      mpv
      vapoursynth
      discord
      zoom-us
      libsForQt5.kget
    ];
  };

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  services.xserver.videoDrivers = [ "nvidia" ];
  hardware.nvidia.prime = {
    offload.enable = true;

    # Bus ID of the Intel GPU. You can find it using lspci, either under 3D or VGA
    intelBusId = "PCI:0:2:0";

    # Bus ID of the NVIDIA GPU. You can find it using lspci, either under 3D or VGA
    nvidiaBusId = "PCI:1:0:0";
  };

  # Optionally, you may need to select the appropriate driver version for your specific GPU.
  # hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.stable;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    git
    htop
    lshw
    dmidecode
    lm_sensors
    #nbfc
    nodejs
    yarn
    libsForQt5.bismuth
    nix-prefetch-github
    nvidia-offload
    neofetch
    lightly-qt
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "22.05"; # Did you read the comment?

}
